        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    11950:    8:int compare(const void* a, const void* b) {
    11950:    9:	if (*(int*)a > *(int*)b)
     2336:   10:		return 1;
     9614:   11:	if (*(int*)a < *(int*)b)
      605:   12:		return -1;
     9009:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
        1:   44:	SelectStream(1);
        1:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
        1:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        1:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       11:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
      110:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
      100:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        1:   73:	if (numPlayers == 2)
        -:   74:	{
        1:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        1:   87:	if (numPlayers == 2)
        -:   88:	{
        1:   89:		state->supplyCount[estate] = 8;
        1:   90:		state->supplyCount[duchy] = 8;
        1:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        1:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:	state->supplyCount[silver] = 40;
        1:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       21:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
      165:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
      155:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       10:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
        2:  115:					if (numPlayers == 2){ 
        1:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
        9:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       10:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
      145:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
        3:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
        2:  140:		state->deckCount[i] = 0;
        8:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
        6:  143:			state->deck[i][j] = estate;
        6:  144:			state->deckCount[i]++;
        -:  145:		}
       16:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
       14:  148:			state->deck[i][j] = copper;
       14:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
        3:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
        2:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
        3:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
        2:  166:		state->handCount[i] = 0;
        2:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       28:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
       27:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        1:  182:	state->outpostPlayed = 0;
        1:  183:	state->phase = 0;
        1:  184:	state->numActions = 1;
        1:  185:	state->numBuys = 1;
        1:  186:	state->playedCardCount = 0;
        1:  187:	state->whoseTurn = 0;
        1:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
        6:  192:	for (it = 0; it < 5; it++){
        5:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
        1:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:	return 0;
        -:  199:}
        -:  200:
       69:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
       69:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
       69:  209:	if (state->deckCount[player] < 1)
       44:  210:		return -1;
       25:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2563:  214:	while (state->deckCount[player] > 0) {
     2538:  215:		card = floor(Random() * state->deckCount[player]);
     2538:  216:		newDeck[newDeckPos] = state->deck[player][card];
     2538:  217:		newDeckPos++;
   228002:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   225464:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     2538:  221:		state->deckCount[player]--;
        -:  222:	}
     2073:  223:	for (i = 0; i < newDeckPos; i++) {
     2048:  224:		state->deck[player][i] = newDeck[i];
     2048:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
       25:  228:	return 0;
        -:  229:}
        -:  230:
       79:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
       79:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
       79:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
       79:  243:	if ( state->numActions < 1 )
        -:  244:	{
       65:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
       14:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
       14:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
       14:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
       14:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
       14:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
       14:  269:	return 0;
        -:  270:}
        -:  271:
       35:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
       35:  280:	who = state->whoseTurn;
        -:  281:
       35:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
       35:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
       35:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
       35:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
       35:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
       35:  299:		state->coins = (state->coins) - (getCost(supplyPos));
       35:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
       35:  308:	return 0;
        -:  309:}
        -:  310:
      334:  311:int numHandCards(struct gameState *state) {
      334:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      687:  315:int handCard(int handPos, struct gameState *state) {
      687:  316:	int currentPlayer = whoseTurn(state);
      687:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       70:  320:int supplyCount(int card, struct gameState *state) {
       70:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
     1214:  346:int whoseTurn(struct gameState *state) {
     1214:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
       37:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
       37:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
      250:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
      213:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      213:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
       37:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
       37:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
       19:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
       18:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
       37:  370:	state->outpostPlayed = 0;
       37:  371:	state->phase = 0;
       37:  372:	state->numActions = 1;
       37:  373:	state->coins = 0;
       37:  374:	state->numBuys = 1;
       37:  375:	state->playedCardCount = 0;
       37:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
      222:  380:	for (k = 0; k < 5; k++){
      185:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
       37:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
       37:  387:	return 0;
        -:  388:}
        -:  389:
       38:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       38:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        1:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       37:  401:	j = 0;
      962:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      925:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
    #####:  406:			j++;
        -:  407:		}
        -:  408:	}
       37:  409:	if ( j >= 3)
        -:  410:	{
    #####:  411:		return 1;
        -:  412:	}
        -:  413:
       37:  414:	return 0;
        -:  415:}
        -:  416:
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
        2:  420:	int score = 0;
        -:  421:	//score from hand
        7:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
       5*:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
       5*:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
       5*:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
       5*:  427:		if (state->hand[player][i] == province) { score = score + 6; };
       5*:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
       5*:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
       10:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
       8*:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
        8:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
       8*:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
        8:  438:		if (state->discard[player][i] == province) { score = score + 6; };
       8*:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
       8*:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
       10:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
       8*:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
        8:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
       8*:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
        8:  449:		if (state->deck[player][i] == province) { score = score + 6; };
       8*:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
       8*:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
        2:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     2798:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     2798:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
     2548:  533:		for (i = 0; i < state->discardCount[player];i++){
     2518:  534:			state->deck[player][i] = state->discard[player][i];
     2518:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       30:  538:		state->deckCount[player] = state->discardCount[player];
       30:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       30:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       30:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       30:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       30:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       30:  559:		if (deckCounter == 0)
        7:  560:			return -1;
        -:  561:
       23:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       23:  563:		state->deckCount[player]--;
       23:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     2768:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     2768:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     2768:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2768:  576:		state->deckCount[player]--;
     2768:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     2791:  580:	return 0;
        -:  581:}
        -:  582:
       70:  583:int getCost(int cardNumber)
        -:  584:{
       70:  585:	switch( cardNumber ) 
        -:  586:	{
    #####:  587:		case curse:
    #####:  588:			return 0;
    #####:  589:		case estate:
    #####:  590:			return 2;
    #####:  591:		case duchy:
    #####:  592:			return 5;
       16:  593:		case province:
       16:  594:			return 8;
    #####:  595:		case copper:
    #####:  596:			return 0;
       32:  597:		case silver:
       32:  598:			return 3;
       14:  599:		case gold:
       14:  600:			return 6;
        4:  601:		case adventurer:
        4:  602:			return 6;
    #####:  603:		case council_room:
    #####:  604:			return 5;
    #####:  605:		case feast:
    #####:  606:			return 4;
    #####:  607:		case gardens:
    #####:  608:			return 4;
    #####:  609:		case mine:
    #####:  610:			return 5;
    #####:  611:		case remodel:
    #####:  612:			return 4;
        4:  613:		case smithy:
        4:  614:			return 4;
    #####:  615:		case village:
    #####:  616:			return 3;
    #####:  617:		case baron:
    #####:  618:			return 4;
    #####:  619:		case great_hall:
    #####:  620:			return 3;
    #####:  621:		case minion:
    #####:  622:			return 5;
    #####:  623:		case steward:
    #####:  624:			return 3;
    #####:  625:		case tribute:
    #####:  626:			return 5;
    #####:  627:		case ambassador:
    #####:  628:			return 3;
    #####:  629:		case cutpurse:
    #####:  630:			return 4;
    #####:  631:		case embargo: 
    #####:  632:			return 2;
    #####:  633:		case outpost:
    #####:  634:			return 5;
    #####:  635:		case salvager:
    #####:  636:			return 4;
    #####:  637:		case sea_hag:
    #####:  638:			return 4;
    #####:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
      110:  646:void adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int* temphand, int z) {
        -:  647:	int cardDrawn;
     2691:  648:	while(drawntreasure<2){
     2581:  649:		drawCard(currentPlayer, state);
     2581:  650:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     2581:  651:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      220:  652:			drawntreasure++;
        -:  653:		else{
     2361:  654:			temphand[z]=cardDrawn;
     2361:  655:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2361:  656:			z++;
        -:  657:		}
     2581:  658:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       37:  659:			shuffle(currentPlayer, state);
        -:  660:		}
        -:  661:	}
        -:  662:
     2471:  663:	while(z-1>=0){
     2361:  664:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2361:  665:		z=z-1;
        -:  666:	}
      110:  667:}
        -:  668:
    #####:  669:void feastEffect(struct gameState *state, int currentPlayer, int* temphand, int choice1) {
        -:  670:	int x;
    #####:  671:	int i = 0;
        -:  672:	//gain card with cost up to 5
        -:  673:	//Backup hand
    #####:  674:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  675:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  676:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  677:	}
        -:  678:	//Backup hand
        -:  679:
        -:  680:	//Update Coins for Buy
    #####:  681:	updateCoins(currentPlayer, state, 5);
    #####:  682:	x = 1;//Condition to loop on
    #####:  683:	while( x == 1) {//Buy one card
    #####:  684:		if (supplyCount(choice1, state) <= 0){
        -:  685:			if (DEBUG)
        -:  686:				printf("None of that card left, sorry!\n");
        -:  687:
        -:  688:			if (DEBUG){
        -:  689:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  690:			}
        -:  691:		}
    #####:  692:		else if (state->coins < getCost(choice1)){
    #####:  693:			printf("That card is too expensive!\n");
        -:  694:
        -:  695:			if (DEBUG){
        -:  696:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  697:			}
        -:  698:		}
        -:  699:		else{
        -:  700:
        -:  701:			if (DEBUG){
        -:  702:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  703:			}
        -:  704:
    #####:  705:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  706:			x = 0;//No more buying cards
        -:  707:
        -:  708:			if (DEBUG){
        -:  709:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:			}
        -:  711:
        -:  712:		}
        -:  713:	}     
        -:  714:
        -:  715:	//Reset Hand
        -:  716:	//for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:	while (i <= state->handCount[currentPlayer]) {
    #####:  718:		state->hand[currentPlayer][i] = temphand[i];
    #####:  719:		temphand[i] = -1;
    #####:  720:		i++;
        -:  721:	}
        -:  722:	//Reset Hand
    #####:  723:}
        -:  724:
        9:  725:void smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  726:	int i;
        -:  727:	//+3 Cards
       36:  728:	for (i = 0; i < 3; i++)
        -:  729:	{
       27:  730:		drawCard(currentPlayer, state);
        -:  731:	}
        -:  732:
        -:  733:	//discard card from hand
        9:  734:	discardCard(state->handCount[currentPlayer] - 3, currentPlayer, state, 0);
        9:  735:}
        -:  736:
    #####:  737:void villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  738:	//+1 Card
    #####:  739:	drawCard(currentPlayer, state);
        -:  740:
        -:  741:	//+2 Actions
    #####:  742:	state->numActions = state->numActions + 2;
        -:  743:
        -:  744:	//discard played card from hand
    #####:  745:	discardCard(handPos, currentPlayer, state, 0);
        -:  746:
    #####:  747:}
        -:  748:
    #####:  749:void stewardEffect(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos) {
    #####:  750:	if (choice1 == 1)
        -:  751:	{
        -:  752:		//+2 cards
    #####:  753:		drawCard(currentPlayer, state);
    #####:  754:		drawCard(currentPlayer, state);
        -:  755:	}
    #####:  756:	if (choice1 == 2)
        -:  757:	{
        -:  758:		//+2 coins
    #####:  759:		state->coins = state->coins + 2;
        -:  760:	}
        -:  761:	else
        -:  762:	{
        -:  763:		//trash 2 cards in hand
    #####:  764:		discardCard(choice2, currentPlayer, state, 1);
    #####:  765:		discardCard(choice3, currentPlayer, state, 1);
        -:  766:	}
        -:  767:
        -:  768:	//discard card from hand
    #####:  769:	discardCard(handPos, currentPlayer, state, 0);
        -:  770:
    #####:  771:}
        -:  772:
      119:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:	int i;
        -:  776:	int j;
        -:  777:	int k;
        -:  778:	int index;
      119:  779:	int currentPlayer = whoseTurn(state);
      119:  780:	int nextPlayer = currentPlayer + 1;
        -:  781:
      119:  782:	int tributeRevealedCards[2] = {-1, -1};
        -:  783:	int temphand[MAX_HAND];// moved above the if statement
      119:  784:	int drawntreasure=0;
      119:  785:	int z = 0;// this is the counter for the temp hand
      119:  786:	if (nextPlayer > (state->numPlayers - 1)){
        5:  787:		nextPlayer = 0;
        -:  788:	}
        -:  789:
        -:  790:
        -:  791:	//uses switch to select card and perform actions
      119:  792:	switch( card ) 
        -:  793:	{
      110:  794:		case adventurer:
      110:  795:			adventurerEffect(drawntreasure, state, currentPlayer, temphand, z);
      110:  796:			return 0;
        -:  797:
    #####:  798:		case council_room:
        -:  799:			//+4 Cards
    #####:  800:			for (i = 0; i < 4; i++)
        -:  801:			{
    #####:  802:				drawCard(currentPlayer, state);
        -:  803:			}
        -:  804:
        -:  805:			//+1 Buy
    #####:  806:			state->numBuys++;
        -:  807:
        -:  808:			//Each other player draws a card
    #####:  809:			for (i = 0; i < state->numPlayers; i++)
        -:  810:			{
    #####:  811:				if ( i != currentPlayer )
        -:  812:				{
    #####:  813:					drawCard(i, state);
        -:  814:				}
        -:  815:			}
        -:  816:
        -:  817:			//put played card in played card pile
    #####:  818:			discardCard(handPos, currentPlayer, state, 0);
        -:  819:
    #####:  820:			return 0;
        -:  821:
    #####:  822:		case feast:
    #####:  823:			feastEffect(state, currentPlayer, temphand, choice1);
        -:  824:
    #####:  825:			return 0;
        -:  826:
    #####:  827:		case gardens:
    #####:  828:			return -1;
        -:  829:
    #####:  830:		case mine:
    #####:  831:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:			{
    #####:  835:				return -1;
        -:  836:			}
        -:  837:
    #####:  838:			if (choice2 > treasure_map || choice2 < curse)
        -:  839:			{
    #####:  840:				return -1;
        -:  841:			}
        -:  842:
    #####:  843:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:			{
    #####:  845:				return -1;
        -:  846:			}
        -:  847:
    #####:  848:			gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:			//discard card from hand
    #####:  851:			discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:			//discard trashed card
    #####:  854:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:			{
    #####:  856:				if (state->hand[currentPlayer][i] == j)
        -:  857:				{
    #####:  858:					discardCard(i, currentPlayer, state, 0);			
    #####:  859:					break;
        -:  860:				}
        -:  861:			}
        -:  862:
    #####:  863:			return 0;
        -:  864:
    #####:  865:		case remodel:
    #####:  866:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:			{
    #####:  870:				return -1;
        -:  871:			}
        -:  872:
    #####:  873:			gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:			//discard card from hand
    #####:  876:			discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:			//discard trashed card
    #####:  879:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:			{
    #####:  881:				if (state->hand[currentPlayer][i] == j)
        -:  882:				{
    #####:  883:					discardCard(i, currentPlayer, state, 0);			
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
        -:  887:
        -:  888:
    #####:  889:			return 0;
        -:  890:
        9:  891:		case smithy:
        9:  892:			smithyEffect(currentPlayer, state, handPos);
        9:  893:			return 0;
        -:  894:
    #####:  895:		case village:
    #####:  896:			villageEffect(currentPlayer, state, handPos);
    #####:  897:			return 0;
        -:  898:
    #####:  899:		case baron:
    #####:  900:			state->numBuys++;//Increase buys by 1!
    #####:  901:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:				int p = 0;//Iterator for hand!
    #####:  903:				int card_not_discarded = 1;//Flag for discard set!
    #####:  904:				while(card_not_discarded){
    #####:  905:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:						state->discardCount[currentPlayer]++;
    #####:  909:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:						}
    #####:  912:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:						state->handCount[currentPlayer]--;
    #####:  914:						card_not_discarded = 0;//Exit the loop
        -:  915:					}
    #####:  916:					else if (p > state->handCount[currentPlayer]){
        -:  917:						if(DEBUG) {
        -:  918:							printf("No estate cards in your hand, invalid choice\n");
        -:  919:							printf("Must gain an estate if there are any\n");
        -:  920:						}
    #####:  921:						if (supplyCount(estate, state) > 0){
    #####:  922:							gainCard(estate, state, 0, currentPlayer);
    #####:  923:							state->supplyCount[estate]--;//Decrement estates
    #####:  924:							if (supplyCount(estate, state) == 0){
    #####:  925:								isGameOver(state);
        -:  926:							}
        -:  927:						}
    #####:  928:						card_not_discarded = 0;//Exit the loop
        -:  929:					}
        -:  930:
        -:  931:					else{
    #####:  932:						p++;//Next card
        -:  933:					}
        -:  934:				}
        -:  935:			}
        -:  936:
        -:  937:			else{
    #####:  938:				if (supplyCount(estate, state) > 0){
    #####:  939:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:					state->supplyCount[estate]--;//Decrement Estates
    #####:  941:					if (supplyCount(estate, state) == 0){
    #####:  942:						isGameOver(state);
        -:  943:					}
        -:  944:				}
        -:  945:			}
        -:  946:
        -:  947:
    #####:  948:			return 0;
        -:  949:
    #####:  950:		case great_hall:
        -:  951:			//+1 Card
    #####:  952:			drawCard(currentPlayer, state);
        -:  953:
        -:  954:			//+1 Actions
    #####:  955:			state->numActions++;
        -:  956:
        -:  957:			//discard card from hand
    #####:  958:			discardCard(handPos, currentPlayer, state, 0);
    #####:  959:			return 0;
        -:  960:
    #####:  961:		case minion:
        -:  962:			//+1 action
    #####:  963:			state->numActions++;
        -:  964:
        -:  965:			//discard card from hand
    #####:  966:			discardCard(handPos, currentPlayer, state, 0);
        -:  967:
    #####:  968:			if (choice1)		//+2 coins
        -:  969:			{
    #####:  970:				state->coins = state->coins + 2;
        -:  971:			}
        -:  972:
    #####:  973:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  974:			{
        -:  975:				//discard hand
    #####:  976:				while(numHandCards(state) > 0)
        -:  977:				{
    #####:  978:					discardCard(handPos, currentPlayer, state, 0);
        -:  979:				}
        -:  980:
        -:  981:				//draw 4
    #####:  982:				for (i = 0; i < 4; i++)
        -:  983:				{
    #####:  984:					drawCard(currentPlayer, state);
        -:  985:				}
        -:  986:
        -:  987:				//other players discard hand and redraw if hand size > 4
    #####:  988:				for (i = 0; i < state->numPlayers; i++)
        -:  989:				{
    #####:  990:					if (i != currentPlayer)
        -:  991:					{
    #####:  992:						if ( state->handCount[i] > 4 )
        -:  993:						{
        -:  994:							//discard hand
    #####:  995:							while( state->handCount[i] > 0 )
        -:  996:							{
    #####:  997:								discardCard(handPos, i, state, 0);
        -:  998:							}
        -:  999:
        -: 1000:							//draw 4
    #####: 1001:							for (j = 0; j < 4; j++)
        -: 1002:							{
    #####: 1003:								drawCard(i, state);
        -: 1004:							}
        -: 1005:						}
        -: 1006:					}
        -: 1007:				}
        -: 1008:
        -: 1009:			}
    #####: 1010:			return 0;
        -: 1011:
    #####: 1012:		case steward:
    #####: 1013:			stewardEffect(choice1, choice2, choice3, currentPlayer, state, handPos);
    #####: 1014:			return 0;
        -: 1015:
    #####: 1016:		case tribute:
    #####: 1017:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:				if (state->deckCount[nextPlayer] > 0){
    #####: 1019:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:					state->deckCount[nextPlayer]--;
        -: 1021:				}
    #####: 1022:				else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:					state->discardCount[nextPlayer]--;
        -: 1025:				}
        -: 1026:				else{
        -: 1027:					//No Card to Reveal
        -: 1028:					if (DEBUG){
        -: 1029:						printf("No cards to reveal\n");
        -: 1030:					}
        -: 1031:				}
        -: 1032:			}
        -: 1033:
        -: 1034:			else{
    #####: 1035:				if (state->deckCount[nextPlayer] == 0){
    #####: 1036:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:						state->deckCount[nextPlayer]++;
    #####: 1039:						state->discard[nextPlayer][i] = -1;
    #####: 1040:						state->discardCount[nextPlayer]--;
        -: 1041:					}
        -: 1042:
    #####: 1043:					shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:				} 
    #####: 1045:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:				state->deckCount[nextPlayer]--;
    #####: 1048:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:				state->deckCount[nextPlayer]--;
        -: 1051:			}    
        -: 1052:
    #####: 1053:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:				state->playedCardCount++;
    #####: 1056:				tributeRevealedCards[1] = -1;
        -: 1057:			}
        -: 1058:
    #####: 1059:			for (i = 0; i <= 2; i ++){
    #####: 1060:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:					state->coins += 2;
        -: 1062:				}
        -: 1063:
    #####: 1064:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:					drawCard(currentPlayer, state);
    #####: 1066:					drawCard(currentPlayer, state);
        -: 1067:				}
        -: 1068:				else{//Action Card
    #####: 1069:					state->numActions = state->numActions + 2;
        -: 1070:				}
        -: 1071:			}
        -: 1072:
    #####: 1073:			return 0;
        -: 1074:
    #####: 1075:		case ambassador:
    #####: 1076:			j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:			if (choice2 > 2 || choice2 < 0)
        -: 1079:			{
    #####: 1080:				return -1;				
        -: 1081:			}
        -: 1082:
    #####: 1083:			if (choice1 == handPos)
        -: 1084:			{
    #####: 1085:				return -1;
        -: 1086:			}
        -: 1087:
    #####: 1088:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:			{
    #####: 1090:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:				{
    #####: 1092:					j++;
        -: 1093:				}
        -: 1094:			}
    #####: 1095:			if (j < choice2)
        -: 1096:			{
    #####: 1097:				return -1;				
        -: 1098:			}
        -: 1099:
        -: 1100:			if (DEBUG) 
        -: 1101:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:			//increase supply count for choosen card by amount being discarded
    #####: 1104:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:
        -: 1106:			//each other player gains a copy of revealed card
    #####: 1107:			for (i = 0; i < state->numPlayers; i++)
        -: 1108:			{
    #####: 1109:				if (i != currentPlayer)
        -: 1110:				{
    #####: 1111:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:				}
        -: 1113:			}
        -: 1114:
        -: 1115:			//discard played card from hand
    #####: 1116:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:			//trash copies of cards returned to supply
    #####: 1119:			for (j = 0; j < choice2; j++)
        -: 1120:			{
    #####: 1121:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:				{
    #####: 1123:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:					{
    #####: 1125:						discardCard(i, currentPlayer, state, 1);
    #####: 1126:						break;
        -: 1127:					}
        -: 1128:				}
        -: 1129:			}			
        -: 1130:
    #####: 1131:			return 0;
        -: 1132:
    #####: 1133:		case cutpurse:
        -: 1134:
    #####: 1135:			updateCoins(currentPlayer, state, 2);
    #####: 1136:			for (i = 0; i < state->numPlayers; i++)
        -: 1137:			{
    #####: 1138:				if (i != currentPlayer)
        -: 1139:				{
    #####: 1140:					for (j = 0; j < state->handCount[i]; j++)
        -: 1141:					{
    #####: 1142:						if (state->hand[i][j] == copper)
        -: 1143:						{
    #####: 1144:							discardCard(j, i, state, 0);
    #####: 1145:							break;
        -: 1146:						}
    #####: 1147:						if (j == state->handCount[i])
        -: 1148:						{
    #####: 1149:							for (k = 0; k < state->handCount[i]; k++)
        -: 1150:							{
        -: 1151:								if (DEBUG)
        -: 1152:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:							}	
    #####: 1154:							break;
        -: 1155:						}		
        -: 1156:					}
        -: 1157:
        -: 1158:				}
        -: 1159:
        -: 1160:			}				
        -: 1161:
        -: 1162:			//discard played card from hand
    #####: 1163:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:			return 0;
        -: 1166:
        -: 1167:
    #####: 1168:		case embargo: 
        -: 1169:			//+2 Coins
    #####: 1170:			state->coins = state->coins + 2;
        -: 1171:
        -: 1172:			//see if selected pile is in play
    #####: 1173:			if ( state->supplyCount[choice1] == -1 )
        -: 1174:			{
    #####: 1175:				return -1;
        -: 1176:			}
        -: 1177:
        -: 1178:			//add embargo token to selected supply pile
    #####: 1179:			state->embargoTokens[choice1]++;
        -: 1180:
        -: 1181:			//trash card
    #####: 1182:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:			return 0;
        -: 1184:
    #####: 1185:		case outpost:
        -: 1186:			//set outpost flag
    #####: 1187:			state->outpostPlayed++;
        -: 1188:
        -: 1189:			//discard card
    #####: 1190:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:			return 0;
        -: 1192:
    #####: 1193:		case salvager:
        -: 1194:			//+1 buy
    #####: 1195:			state->numBuys++;
        -: 1196:
    #####: 1197:			if (choice1)
        -: 1198:			{
        -: 1199:				//gain coins equal to trashed card
    #####: 1200:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:				//trash card
    #####: 1202:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:			}
        -: 1204:
        -: 1205:			//discard card
    #####: 1206:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:			return 0;
        -: 1208:
    #####: 1209:		case sea_hag:
    #####: 1210:			for (i = 0; i < state->numPlayers; i++){
    #####: 1211:				if (i != currentPlayer){
    #####: 1212:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:					state->discardCount[i]++;
    #####: 1214:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:				}
        -: 1216:			}
    #####: 1217:			return 0;
        -: 1218:
    #####: 1219:		case treasure_map:
        -: 1220:			//search hand for another treasure_map
    #####: 1221:			index = -1;
    #####: 1222:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:			{
    #####: 1224:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:				{
    #####: 1226:					index = i;
    #####: 1227:					break;
        -: 1228:				}
        -: 1229:			}
    #####: 1230:			if (index > -1)
        -: 1231:			{
        -: 1232:				//trash both treasure cards
    #####: 1233:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:				discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:				//gain 4 Gold cards
    #####: 1237:				for (i = 0; i < 4; i++)
        -: 1238:				{
    #####: 1239:					gainCard(gold, state, 1, currentPlayer);
        -: 1240:				}
        -: 1241:
        -: 1242:				//return success
    #####: 1243:				return 1;
        -: 1244:			}
        -: 1245:
        -: 1246:			//no second treasure_map found in hand
    #####: 1247:			return -1;
        -: 1248:	}
        -: 1249:
    #####: 1250:	return -1;
        -: 1251:}
        -: 1252:
        9: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:
        -: 1256:	//if card is not trashed, added to Played pile 
        9: 1257:	if (trashFlag < 1)
        -: 1258:	{
        -: 1259:		//add card to played pile
        9: 1260:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        9: 1261:		state->playedCardCount++;
        -: 1262:	}
        -: 1263:
        -: 1264:	//set played card to -1
        9: 1265:	state->hand[currentPlayer][handPos] = -1;
        -: 1266:
        -: 1267:	//remove card from player's hand
        9: 1268:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:	{
        -: 1270:		//reduce number of cards in hand
    #####: 1271:		state->handCount[currentPlayer]--;
        -: 1272:	}
        9: 1273:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:	{
        -: 1275:		//reduce number of cards in hand
    #####: 1276:		state->handCount[currentPlayer]--;
        -: 1277:	}
        -: 1278:	else 	
        -: 1279:	{
        -: 1280:		//replace discarded card with last card in hand
        9: 1281:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:		//set last card to -1
        9: 1283:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:		//reduce number of cards in hand
        9: 1285:		state->handCount[currentPlayer]--;
        -: 1286:	}
        -: 1287:
        9: 1288:	return 0;
        -: 1289:}
        -: 1290:
       35: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:	//Note: supplyPos is enum of choosen card
        -: 1294:
        -: 1295:	//check if supply pile is empty (0) or card is not used in game (-1)
       35: 1296:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:	{
    #####: 1298:		return -1;
        -: 1299:	}
        -: 1300:
        -: 1301:	//added card for [whoseTurn] current player:
        -: 1302:	// toFlag = 0 : add to discard
        -: 1303:	// toFlag = 1 : add to deck
        -: 1304:	// toFlag = 2 : add to hand
        -: 1305:
       35: 1306:	if (toFlag == 1)
        -: 1307:	{
    #####: 1308:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:		state->deckCount[player]++;
        -: 1310:	}
       35: 1311:	else if (toFlag == 2)
        -: 1312:	{
    #####: 1313:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:		state->handCount[player]++;
        -: 1315:	}
        -: 1316:	else
        -: 1317:	{
       35: 1318:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       35: 1319:		state->discardCount[player]++;
        -: 1320:	}
        -: 1321:
        -: 1322:	//decrease number in supply pile
       35: 1323:	state->supplyCount[supplyPos]--;
        -: 1324:
       35: 1325:	return 0;
        -: 1326:}
        -: 1327:
       52: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:	int i;
        -: 1331:
        -: 1332:	//reset coin count
       52: 1333:	state->coins = 0;
        -: 1334:
        -: 1335:	//add coins for each Treasure card in player's hand
      340: 1336:	for (i = 0; i < state->handCount[player]; i++)
        -: 1337:	{
      288: 1338:		if (state->hand[player][i] == copper)
        -: 1339:		{
      106: 1340:			state->coins += 1;
        -: 1341:		}
      182: 1342:		else if (state->hand[player][i] == silver)
        -: 1343:		{
       79: 1344:			state->coins += 2;
        -: 1345:		}
      103: 1346:		else if (state->hand[player][i] == gold)
        -: 1347:		{
       10: 1348:			state->coins += 3;
        -: 1349:		}	
        -: 1350:	}	
        -: 1351:
        -: 1352:	//add bonus
       52: 1353:	state->coins += bonus;
        -: 1354:
       52: 1355:	return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
